 #include <stdio.h>

void merge(int arr[], int left[], int leftSize, int right[], int rightSize) {
int i = 0, j = 0, k = 0;

while (i < leftSize && j < rightSize) {
if (left[i] <= right[j]) {
arr[k++] = left[i++];
} else {
arr[k++] = right[j++];
}
}

while (i < leftSize) {
arr[k++] = left[i++];
}

while (j < rightSize) {
arr[k++] = right[j++];
}
}

void mergeSort(int arr[], int size) {
if (size <= 1) {
return;
}
int mid = size / 2;
int left[mid];
int right[size - mid];

for (int i = 0; i < mid; i++) {
left[i] = arr[i];
}

for (int i = mid; i < size; i++) {
right[i - mid] = arr[i];
}

mergeSort(left, mid);
mergeSort(right, size - mid);
merge(arr, left, mid, right, size - mid);
}

void printArray(int arr[], int size) {
for (int i = 0; i < size; i++) {
printf("%d ", arr[i]);
}
printf("\n");
}
int main() {
int nums1[] = {9, 7, 5, 3, 1};
int m = 5;
int nums2[] = {8, 6, 4, 2, 0};
int n = 5;

int merged[m + n];

for (int i = 0; i < m; i++) {
merged[i] = nums1[i];
}

for (int i = 0; i < n; i++) {
merged[m + i] = nums2[i];
}

mergeSort(merged, m + n);

printf("Merged array: ");
printArray(merged, m + n);

return 0;
}
